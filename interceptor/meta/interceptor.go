package rkechometa

import (
	"github.com/labstack/echo/v4"
	"github.com/rookie-ninja/rk-common/common"
	"github.com/rookie-ninja/rk-echo/interceptor"
	"github.com/rookie-ninja/rk-echo/interceptor/context"
	"github.com/rookie-ninja/rk-entry/entry"
	"time"
)

// Interceptor will add common headers as extension style in http response.
// The key is defined as bellow:
// 1: X-Request-Id: Request id generated by interceptor.
// 2: X-<Prefix-App: Application name.
// 3: X-<Prefix>-App-Version: Version of application.
// 4: X-<Prefix>-App-Unix-Time: Unix time of current application.
// 5: X-<Prefix>-Request-Received-Time: Time of current request received by application.
func Interceptor(opts ...Option) echo.MiddlewareFunc {
	set := newOptionSet(opts...)

	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(ctx echo.Context) error {
			ctx.Set(rkechointer.RpcEntryNameKey, set.EntryName)

			requestId := rkcommon.GenerateRequestId()
			ctx.Response().Header().Set(rkechoctx.RequestIdKey, requestId)

			event := rkechoctx.GetEvent(ctx)
			event.SetRequestId(requestId)
			event.SetEventId(requestId)

			ctx.Response().Header().Set(set.AppNameKey, rkentry.GlobalAppCtx.GetAppInfoEntry().AppName)
			ctx.Response().Header().Set(set.AppVersionKey, rkentry.GlobalAppCtx.GetAppInfoEntry().Version)

			now := time.Now()
			ctx.Response().Header().Set(set.AppUnixTimeKey, now.Format(time.RFC3339Nano))
			ctx.Response().Header().Set(set.ReceivedTimeKey, now.Format(time.RFC3339Nano))

			return next(ctx)
		}
	}
}
